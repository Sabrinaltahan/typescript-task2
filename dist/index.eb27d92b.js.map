{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// Step 2: Implement the TodoList class\nclass TodoList {\n    constructor(){\n        this.todos = []; // Initialize todos array\n        this.nextId = 1; // Initialize nextId to start from 1\n        this.loadFromLocalStorage(); // Load todos from local storage if available\n    }\n    // Method to add a new todo\n    addTodo(task, priority) {\n        // Check for valid task and priority\n        if (task.trim() === \"\" || priority < 1 || priority > 3) return false;\n        // Create a new todo object\n        const newTodo = {\n            id: this.nextId++,\n            task: task,\n            completed: false,\n            priority: priority,\n            createdAt: new Date() // Set creation date\n        };\n        // Add the new todo to the todos array\n        this.todos.push(newTodo);\n        // Save todos to local storage\n        this.saveToLocalStorage();\n        return true;\n    }\n    // Method to edit an existing todo\n    editTodo(todoId, newTask, newPriority) {\n        // Find the index of the todo with given id\n        const todoIndex = this.todos.findIndex((todo)=>todo.id === todoId);\n        // Check if the todo with given id exists and new task/priority are valid\n        if (todoIndex === -1 || newTask.trim() === \"\" || newPriority < 1 || newPriority > 3) return false;\n        // Update task and priority of the todo\n        this.todos[todoIndex].task = newTask;\n        this.todos[todoIndex].priority = newPriority;\n        // Save todos to local storage\n        this.saveToLocalStorage();\n        return true;\n    }\n    // Method to delete a todo\n    deleteTodo(todoId) {\n        // Filter out the todo with given id\n        this.todos = this.todos.filter((todo)=>todo.id !== todoId);\n        // Save todos to local storage\n        this.saveToLocalStorage();\n    }\n    // Method to mark a todo as completed\n    markTodoCompleted(todoId) {\n        // Find the index of the todo with given id\n        const todoIndex = this.todos.findIndex((todo)=>todo.id === todoId);\n        // Check if the todo with given id exists\n        if (todoIndex !== -1) {\n            // Mark the todo as completed\n            this.todos[todoIndex].completed = true;\n            // Save todos to local storage\n            this.saveToLocalStorage();\n        }\n    }\n    // Method to get all todos\n    getTodos() {\n        return this.todos;\n    }\n    // Method to save todos to local storage\n    saveToLocalStorage() {\n        localStorage.setItem(\"todos\", JSON.stringify(this.todos));\n    }\n    // Method to load todos from local storage\n    loadFromLocalStorage() {\n        // Get todos from local storage\n        const storedTodos = localStorage.getItem(\"todos\");\n        // Parse todos from JSON string if available\n        if (storedTodos) {\n            this.todos = JSON.parse(storedTodos);\n            // Update nextId based on the maximum todo id\n            this.nextId = Math.max(...this.todos.map((todo)=>todo.id), 0) + 1;\n            // Ensure that todos have createdAt property initialized\n            this.todos.forEach((todo)=>{\n                if (!todo.createdAt) todo.createdAt = new Date();\n            });\n        }\n    }\n}\n// Event listener for DOMContentLoaded event\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const todoForm = document.getElementById(\"todo-form\");\n    const todoList = document.getElementById(\"todo-list\");\n    const todoListInstance = new TodoList();\n    // Function to render todos\n    function renderTodos() {\n        todoList.innerHTML = \"\"; // Clear the existing list\n        todoListInstance.getTodos().forEach((todo, index)=>{\n            const listItem = document.createElement(\"li\");\n            listItem.textContent = `${todo.task} (Priority: ${todo.priority}) - Created at: ${todo.createdAt.toLocaleString()}`;\n            if (todo.completed) listItem.style.textDecoration = \"line-through\";\n            const editButton = document.createElement(\"button\");\n            editButton.textContent = \"Edit\";\n            editButton.addEventListener(\"click\", (event)=>{\n                event.stopPropagation(); // Prevent the click event from bubbling up to the list item\n                const newTask = prompt(\"Enter new task:\", todo.task);\n                const newPriority = parseInt(prompt(\"Enter new priority (1-3):\", todo.priority.toString()) || \"0\");\n                if (newTask !== null && newPriority !== 0) {\n                    todoListInstance.editTodo(todo.id, newTask, newPriority);\n                    renderTodos();\n                }\n            });\n            listItem.appendChild(editButton);\n            const deleteButton = document.createElement(\"button\");\n            deleteButton.textContent = \"Delete\";\n            deleteButton.addEventListener(\"click\", (event)=>{\n                event.stopPropagation(); // Prevent the click event from bubbling up to the list item\n                const confirmDelete = confirm(\"Are you sure you want to delete this todo?\");\n                if (confirmDelete) {\n                    todoListInstance.deleteTodo(todo.id);\n                    renderTodos();\n                }\n            });\n            listItem.appendChild(deleteButton);\n            listItem.addEventListener(\"click\", ()=>{\n                todoListInstance.markTodoCompleted(todo.id);\n                renderTodos();\n            });\n            todoList.appendChild(listItem);\n        });\n    }\n    // Render initial todos\n    renderTodos();\n    // Form submission handler\n    todoForm.addEventListener(\"submit\", function(event) {\n        event.preventDefault();\n        const taskInput = document.getElementById(\"task\");\n        const priorityInput = document.getElementById(\"priority\");\n        const task = taskInput.value.trim();\n        const priority = parseInt(priorityInput.value);\n        if (todoListInstance.addTodo(task, priority)) {\n            taskInput.value = \"\"; // Clear the input field\n            priorityInput.value = \"\"; // Clear the input field\n            renderTodos(); // Render updated todos\n        } else alert(\"Please enter a valid task and priority (1-3).\");\n    });\n});\n\n//# sourceMappingURL=index.eb27d92b.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Step 2: Implement the TodoList class\nclass TodoList {\n    constructor() {\n        this.todos = []; // Initialize todos array\n        this.nextId = 1; // Initialize nextId to start from 1\n        this.loadFromLocalStorage(); // Load todos from local storage if available\n    }\n    // Method to add a new todo\n    addTodo(task, priority) {\n        // Check for valid task and priority\n        if (task.trim() === '' || priority < 1 || priority > 3) {\n            return false;\n        }\n        // Create a new todo object\n        const newTodo = {\n            id: this.nextId++, // Assign unique id\n            task: task,\n            completed: false,\n            priority: priority,\n            createdAt: new Date() // Set creation date\n        };\n        // Add the new todo to the todos array\n        this.todos.push(newTodo);\n        // Save todos to local storage\n        this.saveToLocalStorage();\n        return true;\n    }\n    // Method to edit an existing todo\n    editTodo(todoId, newTask, newPriority) {\n        // Find the index of the todo with given id\n        const todoIndex = this.todos.findIndex(todo => todo.id === todoId);\n        // Check if the todo with given id exists and new task/priority are valid\n        if (todoIndex === -1 || newTask.trim() === '' || newPriority < 1 || newPriority > 3) {\n            return false;\n        }\n        // Update task and priority of the todo\n        this.todos[todoIndex].task = newTask;\n        this.todos[todoIndex].priority = newPriority;\n        // Save todos to local storage\n        this.saveToLocalStorage();\n        return true;\n    }\n    // Method to delete a todo\n    deleteTodo(todoId) {\n        // Filter out the todo with given id\n        this.todos = this.todos.filter(todo => todo.id !== todoId);\n        // Save todos to local storage\n        this.saveToLocalStorage();\n    }\n    // Method to mark a todo as completed\n    markTodoCompleted(todoId) {\n        // Find the index of the todo with given id\n        const todoIndex = this.todos.findIndex(todo => todo.id === todoId);\n        // Check if the todo with given id exists\n        if (todoIndex !== -1) {\n            // Mark the todo as completed\n            this.todos[todoIndex].completed = true;\n            // Save todos to local storage\n            this.saveToLocalStorage();\n        }\n    }\n    // Method to get all todos\n    getTodos() {\n        return this.todos;\n    }\n    // Method to save todos to local storage\n    saveToLocalStorage() {\n        localStorage.setItem('todos', JSON.stringify(this.todos));\n    }\n    // Method to load todos from local storage\n    loadFromLocalStorage() {\n        // Get todos from local storage\n        const storedTodos = localStorage.getItem('todos');\n        // Parse todos from JSON string if available\n        if (storedTodos) {\n            this.todos = JSON.parse(storedTodos);\n            // Update nextId based on the maximum todo id\n            this.nextId = Math.max(...this.todos.map(todo => todo.id), 0) + 1;\n            // Ensure that todos have createdAt property initialized\n            this.todos.forEach(todo => {\n                if (!todo.createdAt) {\n                    todo.createdAt = new Date();\n                }\n            });\n        }\n    }\n}\n// Event listener for DOMContentLoaded event\ndocument.addEventListener('DOMContentLoaded', function () {\n    const todoForm = document.getElementById('todo-form');\n    const todoList = document.getElementById('todo-list');\n    const todoListInstance = new TodoList();\n    // Function to render todos\n    function renderTodos() {\n        todoList.innerHTML = ''; // Clear the existing list\n        todoListInstance.getTodos().forEach((todo, index) => {\n            const listItem = document.createElement('li');\n            listItem.textContent = `${todo.task} (Priority: ${todo.priority}) - Created at: ${todo.createdAt.toLocaleString()}`;\n            if (todo.completed) {\n                listItem.style.textDecoration = 'line-through';\n            }\n            const editButton = document.createElement('button');\n            editButton.textContent = 'Edit';\n            editButton.addEventListener('click', (event) => {\n                event.stopPropagation(); // Prevent the click event from bubbling up to the list item\n                const newTask = prompt('Enter new task:', todo.task);\n                const newPriority = parseInt(prompt('Enter new priority (1-3):', todo.priority.toString()) || '0');\n                if (newTask !== null && newPriority !== 0) {\n                    todoListInstance.editTodo(todo.id, newTask, newPriority);\n                    renderTodos();\n                }\n            });\n            listItem.appendChild(editButton);\n            const deleteButton = document.createElement('button');\n            deleteButton.textContent = 'Delete';\n            deleteButton.addEventListener('click', (event) => {\n                event.stopPropagation(); // Prevent the click event from bubbling up to the list item\n                const confirmDelete = confirm('Are you sure you want to delete this todo?');\n                if (confirmDelete) {\n                    todoListInstance.deleteTodo(todo.id);\n                    renderTodos();\n                }\n            });\n            listItem.appendChild(deleteButton);\n            listItem.addEventListener('click', () => {\n                todoListInstance.markTodoCompleted(todo.id);\n                renderTodos();\n            });\n            todoList.appendChild(listItem);\n        });\n    }\n    // Render initial todos\n    renderTodos();\n    // Form submission handler\n    todoForm.addEventListener('submit', function (event) {\n        event.preventDefault();\n        const taskInput = document.getElementById('task');\n        const priorityInput = document.getElementById('priority');\n        const task = taskInput.value.trim();\n        const priority = parseInt(priorityInput.value);\n        if (todoListInstance.addTodo(task, priority)) {\n            taskInput.value = ''; // Clear the input field\n            priorityInput.value = ''; // Clear the input field\n            renderTodos(); // Render updated todos\n        }\n        else {\n            alert('Please enter a valid task and priority (1-3).');\n        }\n    });\n});\n"],"names":["Object","defineProperty","exports","value","TodoList","constructor","todos","nextId","loadFromLocalStorage","addTodo","task","priority","trim","newTodo","id","completed","createdAt","Date","push","saveToLocalStorage","editTodo","todoId","newTask","newPriority","todoIndex","findIndex","todo","deleteTodo","filter","markTodoCompleted","getTodos","localStorage","setItem","JSON","stringify","storedTodos","getItem","parse","Math","max","map","forEach","document","addEventListener","todoForm","getElementById","todoList","todoListInstance","renderTodos","innerHTML","index","listItem","createElement","textContent","toLocaleString","style","textDecoration","editButton","event","stopPropagation","prompt","parseInt","toString","appendChild","deleteButton","confirm","preventDefault","taskInput","priorityInput","alert"],"version":3,"file":"index.eb27d92b.js.map"}