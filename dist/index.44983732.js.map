{"mappings":"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","sources":["src/script.js"],"sourcesContent":["\"use strict\";\n// Step 2: Implement the TodoList class\nclass TodoList {\n    constructor() {\n        this.todos = []; // Initialize todos array\n        this.nextId = 1; // Initialize nextId to start from 1\n        this.loadFromLocalStorage(); // Load todos from local storage if available\n    }\n    // Method to add a new todo\n    addTodo(task, priority) {\n        // Check for valid task and priority\n        if (task.trim() === '' || priority < 1 || priority > 3) {\n            return false;\n        }\n        // Create a new todo object\n        const newTodo = {\n            id: this.nextId++, // Assign unique id\n            task: task,\n            completed: false,\n            priority: priority,\n            createdAt: new Date() // Set creation date\n        };\n        // Add the new todo to the todos array\n        this.todos.push(newTodo);\n        // Save todos to local storage\n        this.saveToLocalStorage();\n        return true;\n    }\n    // Method to edit an existing todo\n    editTodo(todoId, newTask, newPriority) {\n        // Find the index of the todo with given id\n        const todoIndex = this.todos.findIndex(todo => todo.id === todoId);\n        // Check if the todo with given id exists and new task/priority are valid\n        if (todoIndex === -1 || newTask.trim() === '' || newPriority < 1 || newPriority > 3) {\n            return false;\n        }\n        // Update task and priority of the todo\n        this.todos[todoIndex].task = newTask;\n        this.todos[todoIndex].priority = newPriority;\n        // Save todos to local storage\n        this.saveToLocalStorage();\n        return true;\n    }\n    // Method to delete a todo\n    deleteTodo(todoId) {\n        // Filter out the todo with given id\n        this.todos = this.todos.filter(todo => todo.id !== todoId);\n        // Save todos to local storage\n        this.saveToLocalStorage();\n    }\n    // Method to mark a todo as completed\n    markTodoCompleted(todoId) {\n        // Find the index of the todo with given id\n        const todoIndex = this.todos.findIndex(todo => todo.id === todoId);\n        // Check if the todo with given id exists\n        if (todoIndex !== -1) {\n            // Mark the todo as completed\n            this.todos[todoIndex].completed = true;\n            // Save todos to local storage\n            this.saveToLocalStorage();\n        }\n    }\n    // Method to get all todos\n    getTodos() {\n        return this.todos;\n    }\n    // Method to save todos to local storage\n    saveToLocalStorage() {\n        localStorage.setItem('todos', JSON.stringify(this.todos));\n    }\n    // Method to load todos from local storage\n    loadFromLocalStorage() {\n        // Get todos from local storage\n        const storedTodos = localStorage.getItem('todos');\n        // Parse todos from JSON string if available\n        if (storedTodos) {\n            this.todos = JSON.parse(storedTodos);\n            // Update nextId based on the maximum todo id\n            this.nextId = Math.max(...this.todos.map(todo => todo.id), 0) + 1;\n            // Ensure that todos have createdAt property initialized\n            this.todos.forEach(todo => {\n                if (!todo.createdAt) {\n                    todo.createdAt = new Date();\n                }\n            });\n        }\n    }\n}\n// Event listener for DOMContentLoaded event\ndocument.addEventListener('DOMContentLoaded', function () {\n    const todoForm = document.getElementById('todo-form');\n    const todoList = document.getElementById('todo-list');\n    const todoListInstance = new TodoList();\n    // Function to render todos\n    function renderTodos() {\n        todoList.innerHTML = ''; // Clear the existing list\n        todoListInstance.getTodos().forEach((todo, index) => {\n            const listItem = document.createElement('li');\n            listItem.textContent = `${todo.task} (Priority: ${todo.priority}) - Created at: ${todo.createdAt.toLocaleString()}`;\n            if (todo.completed) {\n                listItem.style.textDecoration = 'line-through';\n            }\n            const editButton = document.createElement('button');\n            editButton.textContent = 'Edit';\n            editButton.addEventListener('click', (event) => {\n                event.stopPropagation(); // Prevent the click event from bubbling up to the list item\n                const newTask = prompt('Enter new task:', todo.task);\n                const newPriority = parseInt(prompt('Enter new priority (1-3):', todo.priority.toString()) || '0');\n                if (newTask !== null && newPriority !== 0) {\n                    todoListInstance.editTodo(todo.id, newTask, newPriority);\n                    renderTodos();\n                }\n            });\n            listItem.appendChild(editButton);\n            const deleteButton = document.createElement('button');\n            deleteButton.textContent = 'Delete';\n            deleteButton.addEventListener('click', (event) => {\n                event.stopPropagation(); // Prevent the click event from bubbling up to the list item\n                const confirmDelete = confirm('Are you sure you want to delete this todo?');\n                if (confirmDelete) {\n                    todoListInstance.deleteTodo(todo.id);\n                    renderTodos();\n                }\n            });\n            listItem.appendChild(deleteButton);\n            listItem.addEventListener('click', () => {\n                todoListInstance.markTodoCompleted(todo.id);\n                renderTodos();\n            });\n            todoList.appendChild(listItem);\n        });\n    }\n    // Render initial todos\n    renderTodos();\n    // Form submission handler\n    todoForm.addEventListener('submit', function (event) {\n        event.preventDefault();\n        const taskInput = document.getElementById('task');\n        const priorityInput = document.getElementById('priority');\n        const task = taskInput.value.trim();\n        const priority = parseInt(priorityInput.value);\n        if (todoListInstance.addTodo(task, priority)) {\n            taskInput.value = ''; // Clear the input field\n            priorityInput.value = ''; // Clear the input field\n            renderTodos(); // Render updated todos\n        }\n        else {\n            alert('Please enter a valid task and priority (1-3).');\n        }\n    });\n});\n"],"names":[],"version":3,"file":"index.44983732.js.map","sourceRoot":"/__parcel_source_root/"}